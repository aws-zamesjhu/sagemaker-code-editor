Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscode/extensions.json
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscode/extensions.json
@@ -0,0 +1,5 @@
+{
+  // See http://go.microsoft.com/fwlink/?LinkId=827846
+  // for the documentation about the extensions.json format
+  "recommendations": ["dbaeumer.vscode-eslint", "amodio.tsl-problem-matcher", "ms-vscode.extension-test-runner"]
+}
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscode/launch.json
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscode/launch.json
@@ -0,0 +1,21 @@
+// A launch configuration that compiles the extension and then opens it inside a new window
+// Use IntelliSense to learn about possible attributes.
+// Hover to view descriptions of existing attributes.
+// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+{
+	"version": "0.2.0",
+	"configurations": [
+		{
+			"name": "Run Extension",
+			"type": "extensionHost",
+			"request": "launch",
+			"args": [
+				"--extensionDevelopmentPath=${workspaceFolder}"
+			],
+			"outFiles": [
+				"${workspaceFolder}/dist/**/*.js"
+			],
+			"preLaunchTask": "${defaultBuildTask}"
+		}
+	]
+}
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscode/settings.json
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscode/settings.json
@@ -0,0 +1,13 @@
+// Place your settings in this file to overwrite default and user settings.
+{
+	"files.exclude": {
+		"out": false, // set this to true to hide the "out" folder with the compiled JS files
+		"dist": false // set this to true to hide the "dist" folder with the compiled JS files
+	},
+	"search.exclude": {
+		"out": true, // set this to false to include "out" folder in search results
+		"dist": true // set this to false to include "dist" folder in search results
+	},
+	// Turn off tsc task auto detection since we have the necessary tasks as npm scripts
+	"typescript.tsc.autoDetect": "off"
+}
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscode/tasks.json
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscode/tasks.json
@@ -0,0 +1,40 @@
+// See https://go.microsoft.com/fwlink/?LinkId=733558
+// for the documentation about the tasks.json format
+{
+	"version": "2.0.0",
+	"tasks": [
+		{
+			"type": "npm",
+			"script": "watch",
+			"problemMatcher": "$ts-webpack-watch",
+			"isBackground": true,
+			"presentation": {
+				"reveal": "never",
+				"group": "watchers"
+			},
+			"group": {
+				"kind": "build",
+				"isDefault": true
+			}
+		},
+		{
+			"type": "npm",
+			"script": "watch-tests",
+			"problemMatcher": "$tsc-watch",
+			"isBackground": true,
+			"presentation": {
+				"reveal": "never",
+				"group": "watchers"
+			},
+			"group": "build"
+		},
+		{
+			"label": "tasks: watch-tests",
+			"dependsOn": [
+				"npm: watch",
+				"npm: watch-tests"
+			],
+			"problemMatcher": []
+		}
+	]
+}
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscodeignore
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/.vscodeignore
@@ -0,0 +1,14 @@
+.vscode/**
+.vscode-test/**
+out/**
+node_modules/**
+src/**
+.gitignore
+.yarnrc
+webpack.config.js
+vsc-extension-quickstart.md
+**/tsconfig.json
+**/eslint.config.mjs
+**/*.map
+**/*.ts
+**/.vscode-test.*
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/CHANGELOG.md
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/CHANGELOG.md
@@ -0,0 +1,9 @@
+# Change Log
+
+All notable changes to the "post-startup-notifications" extension will be documented in this file.
+
+Check [Keep a Changelog](http://keepachangelog.com/) for recommendations on how to structure this file.
+
+## [Unreleased]
+
+- Initial release
\ No newline at end of file
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/README.md
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/README.md
@@ -0,0 +1,4 @@
+# post-startup-notifications README
+
+This extension monitors post startup script execution and notifies users on success/failure.
+
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/eslint.config.mjs
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/eslint.config.mjs
@@ -0,0 +1,28 @@
+import typescriptEslint from "@typescript-eslint/eslint-plugin";
+import tsParser from "@typescript-eslint/parser";
+
+export default [{
+    files: ["**/*.ts"],
+}, {
+    plugins: {
+        "@typescript-eslint": typescriptEslint,
+    },
+
+    languageOptions: {
+        parser: tsParser,
+        ecmaVersion: 2022,
+        sourceType: "module",
+    },
+
+    rules: {
+        "@typescript-eslint/naming-convention": ["warn", {
+            selector: "import",
+            format: ["camelCase", "PascalCase"],
+        }],
+
+        curly: "warn",
+        eqeqeq: "warn",
+        "no-throw-literal": "warn",
+        semi: "warn",
+    },
+}];
\ No newline at end of file
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/package.json
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/package.json
@@ -0,0 +1,57 @@
+{
+  "name": "post-startup-notifications",
+  "displayName": "post-startup-notifications",
+  "description": "Extension for surfacing post startup script status notifications to users",
+  "version": "0.0.1",
+  "publisher": "sagemaker",
+  "license": "MIT",
+  "engines": {
+    "vscode": "^1.73.0"
+  },
+  "categories": [
+    "Other"
+  ],
+  "activationEvents": [
+    "*"
+  ],
+  "main": "./dist/extension.js",
+  "contributes": {
+    "commands": []
+  },
+  "scripts": {
+    "test": "jest",
+    "compile": "gulp compile-extension:post-startup-notifications",
+    "watch": "npm run build-preview && gulp watch-extension:post-startup-notifications",
+    "vscode:prepublish": "npm run build-ext",
+    "build-ext": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:post-startup-notifications ./tsconfig.json"
+  },
+  "jest": {
+    "preset": "ts-jest",
+    "testEnvironment": "node",
+    "moduleFileExtensions": [
+      "ts",
+      "js"
+    ]
+  },
+  "devDependencies": {
+    "@types/jest": "^29.5.14",
+    "@types/mocha": "^10.0.10",
+    "@types/node": "20.x",
+    "@types/vscode": "^1.98.0",
+    "@typescript-eslint/eslint-plugin": "^8.25.0",
+    "@typescript-eslint/parser": "^8.25.0",
+    "@vscode/test-cli": "^0.0.10",
+    "@vscode/test-electron": "^2.4.1",
+    "eslint": "^9.21.0",
+    "jest": "^29.7.0",
+    "mocha": "^11.1.0",
+    "ts-jest": "^29.3.0",
+    "ts-loader": "^9.5.2",
+    "typescript": "^5.7.3",
+    "webpack": "^5.98.0",
+    "webpack-cli": "^6.0.1"
+  },
+  "dependencies": {
+    "chokidar": "^4.0.3"
+  }
+}
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/src/constant.ts
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/src/constant.ts
@@ -0,0 +1,3 @@
+export const POST_START_UP_STATUS_FILE = '/tmp/.post-startup-status.json';
+export const SERVICE_NAME_ENV_VALUE = 'SageMakerUnifiedStudio';
+export const SERVICE_NAME_ENV_KEY = 'SERVICE_NAME';
\ No newline at end of file
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/src/extension.ts
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/src/extension.ts
@@ -0,0 +1,80 @@
+import * as vscode from 'vscode';
+import * as fs from 'fs';
+import { POST_START_UP_STATUS_FILE, SERVICE_NAME_ENV_KEY, SERVICE_NAME_ENV_VALUE } from './constant';
+import { StatusFile } from './types';
+import * as chokidar from 'chokidar';
+
+
+let previousStatus: string | undefined;
+let watcher: chokidar.FSWatcher;
+let outputChannel: vscode.OutputChannel;
+
+export function activate(context: vscode.ExtensionContext) {
+  // Check if in SageMaker Unified Studio
+  const envValue = process.env[SERVICE_NAME_ENV_KEY];
+
+  if (!envValue || envValue !== SERVICE_NAME_ENV_VALUE) {
+    return;
+  }
+
+  outputChannel = vscode.window.createOutputChannel('SageMaker Unified Studio Post Startup Notifications');
+
+  try {
+    watcher = chokidar.watch(POST_START_UP_STATUS_FILE, {
+      persistent: true,
+      ignoreInitial: false,
+      awaitWriteFinish: {
+        stabilityThreshold: 2000,
+        pollInterval: 100
+      }
+    });
+
+    watcher.on('add', (path) => {
+      processStatusFile();
+    }).on('change', (path) => {
+      processStatusFile();
+    }).on('unlink', (path) => {
+      outputChannel.appendLine(`File ${path} has been removed`);
+    });
+
+  } catch (error: any) {
+    outputChannel.appendLine(`Error setting up file watcher: ${error}`);
+  }
+}
+
+function processStatusFile() {
+  try {
+    const content = fs.readFileSync(POST_START_UP_STATUS_FILE, 'utf8');
+    const statusData: StatusFile = JSON.parse(content);
+
+    // Only show message if status has changed
+    if (statusData.status && statusData.status !== previousStatus) {
+      previousStatus = statusData.status;
+
+      if (statusData.message) {
+        switch (statusData.status.toLowerCase()) {
+          case 'error':
+            vscode.window.showErrorMessage(statusData.message);
+            break;
+          case 'in-progress':
+          default:
+            vscode.window.showInformationMessage(statusData.message);
+        }
+      }
+    }
+  } catch (error: any) {
+    if (error.code !== 'ENOENT') {
+      outputChannel.appendLine(`Error processing status file: ${error.message}`);
+    }
+  }
+};
+
+export function deactivate() {
+  if (watcher) {
+    watcher.close();
+  }
+  outputChannel.appendLine('Status monitor deactivated');
+  if (outputChannel) {
+    outputChannel.dispose();
+  }
+}
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/src/test/extension.test.ts
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/src/test/extension.test.ts
@@ -0,0 +1,201 @@
+import * as vscode from 'vscode';
+import * as fs from 'fs';
+import * as chokidar from 'chokidar';
+import { activate, deactivate } from '../extension';
+import { POST_START_UP_STATUS_FILE, SERVICE_NAME_ENV_KEY, SERVICE_NAME_ENV_VALUE } from '../constant';
+
+type MockCall = [string, (path: string) => void];
+
+interface MockFSWatcher extends chokidar.FSWatcher {
+    on: jest.Mock;
+    close: jest.Mock;
+}
+
+// Mocks setup
+jest.mock('vscode', () => ({
+  window: {
+      showErrorMessage: jest.fn(),
+      showInformationMessage: jest.fn(),
+      createOutputChannel: jest.fn()
+  }
+}));
+
+jest.mock('fs');
+jest.mock('chokidar');
+
+describe('SageMaker Unified Studio Extension Tests', () => {
+    let mockContext: vscode.ExtensionContext;
+    let mockWatcher: MockFSWatcher;
+    let mockOutputChannel: vscode.OutputChannel;
+
+    beforeEach(() => {
+        // Reset mocks
+        jest.resetAllMocks();
+
+        // Setup context
+        mockContext = { subscriptions: [] } as any;
+
+        // Setup watcher
+        mockWatcher = {
+            on: jest.fn().mockReturnThis(),
+            close: jest.fn()
+        } as any;
+
+        mockOutputChannel = {
+          appendLine: jest.fn(),
+          dispose: jest.fn()
+        } as any;
+
+        (chokidar.watch as jest.Mock).mockReturnValue(mockWatcher);
+        (vscode.window.createOutputChannel as jest.Mock).mockReturnValue(mockOutputChannel);
+        process.env[SERVICE_NAME_ENV_KEY] = SERVICE_NAME_ENV_VALUE;
+    });
+
+    // Helper function to get watcher callbacks
+    const getWatcherCallback = (eventType: string): ((path: string) => void) => {
+        const call = mockWatcher.on.mock.calls.find(
+            (call: MockCall) => call[0] === eventType
+        );
+        return call ? call[1] : jest.fn();
+    };
+
+    // Helper function to simulate file content
+    const simulateFileContent = (content: object): void => {
+        (fs.readFileSync as jest.Mock).mockReturnValue(JSON.stringify(content));
+    };
+
+    describe('Activation Tests', () => {
+        test('should not activate outside SageMaker environment', () => {
+            process.env[SERVICE_NAME_ENV_KEY] = 'wrong-value';
+            activate(mockContext);
+            expect(vscode.window.createOutputChannel).not.toHaveBeenCalled();
+        });
+
+        test('should initialize properly in SageMaker environment', () => {
+            activate(mockContext);
+            expect(vscode.window.createOutputChannel).toHaveBeenCalledWith(
+                'SageMaker Unified Studio Post Startup Notifications'
+            );
+            expect(chokidar.watch).toHaveBeenCalledWith(
+                POST_START_UP_STATUS_FILE,
+                expect.objectContaining({
+                    persistent: true,
+                    ignoreInitial: false
+                })
+            );
+        });
+
+        test('should handle watcher setup errors', () => {
+            const error = new Error('Setup error');
+            (chokidar.watch as jest.Mock).mockImplementation(() => { throw error; });
+            activate(mockContext);
+            expect(mockOutputChannel.appendLine).toHaveBeenCalled();
+        });
+    });
+
+    describe('File Processing Tests', () => {
+        test('should handle error status', () => {
+            simulateFileContent({
+                status: 'error',
+                message: 'Test error message'
+            });
+
+            activate(mockContext);
+            getWatcherCallback('add')('test-path');
+
+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith('Test error message');
+        });
+
+        test('should handle in-progress status', () => {
+            simulateFileContent({
+                status: 'in-progress',
+                message: 'Processing message'
+            });
+
+            activate(mockContext);
+            getWatcherCallback('add')('test-path');
+
+            expect(vscode.window.showInformationMessage).toHaveBeenCalledWith('Processing message');
+        });
+
+        test('should not show message for unchanged status', () => {
+            simulateFileContent({
+                status: 'error',
+                message: 'Error message'
+            });
+
+            activate(mockContext);
+            const addCallback = getWatcherCallback('add');
+            addCallback('test-path');
+            expect(vscode.window.showErrorMessage).toHaveBeenCalledTimes(1);
+            
+            addCallback('test-path');
+            expect(vscode.window.showErrorMessage).toHaveBeenCalledTimes(1);
+        });
+
+        test('should handle file removal', () => {
+            activate(mockContext);
+            getWatcherCallback('unlink')('test-path');
+            expect(mockOutputChannel.appendLine).toHaveBeenCalledWith('File test-path has been removed');
+        });
+    });
+
+    describe('Error Handling Tests', () => {
+        test('should handle invalid JSON', () => {
+            (fs.readFileSync as jest.Mock).mockReturnValue('invalid json');
+            
+            activate(mockContext);
+            getWatcherCallback('add')('test-path');
+
+            expect(mockOutputChannel.appendLine).toHaveBeenCalledWith(
+                expect.stringContaining('Error processing status file')
+            );
+        });
+
+        test('should handle file read errors', () => {
+            (fs.readFileSync as jest.Mock).mockImplementation(() => {
+                throw new Error('Read error');
+            });
+
+            activate(mockContext);
+            getWatcherCallback('add')('test-path');
+
+            expect(mockOutputChannel.appendLine).toHaveBeenCalledWith(
+                expect.stringContaining('Error processing status file')
+            );
+        });
+
+        test('should ignore ENOENT errors', () => {
+            const error = new Error('File not found');
+            (error as any).code = 'ENOENT';
+            (fs.readFileSync as jest.Mock).mockImplementation(() => {
+                throw error;
+            });
+
+            activate(mockContext);
+            getWatcherCallback('add')('test-path');
+
+            expect(mockOutputChannel.appendLine).not.toHaveBeenCalled();
+        });
+
+        test('should handle missing status or message', () => {
+            simulateFileContent({});
+            
+            activate(mockContext);
+            getWatcherCallback('add')('test-path');
+
+            expect(vscode.window.showErrorMessage).not.toHaveBeenCalled();
+            expect(vscode.window.showInformationMessage).not.toHaveBeenCalled();
+        });
+    });
+
+    describe('Deactivation Tests', () => {
+        test('should cleanup resources properly', () => {
+            activate(mockContext);
+            deactivate();
+
+            expect(mockWatcher.close).toHaveBeenCalled();
+            expect(mockOutputChannel.dispose).toHaveBeenCalled();
+        });
+    });
+});
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/src/types.ts
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/src/types.ts
@@ -0,0 +1,6 @@
+export interface StatusFile {
+    status: string;
+    message: string;
+    link: string;
+    label: string;
+}
\ No newline at end of file
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/tsconfig.json
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/tsconfig.json
@@ -0,0 +1,17 @@
+{
+	"compilerOptions": {
+		"module": "Node16",
+		"target": "ES2022",
+		"lib": [
+			"ES2022"
+		],
+		"sourceMap": true,
+		"rootDir": "src",
+		"strict": true,   /* enable all strict type-checking options */
+		"isolatedModules": true
+		/* Additional Checks */
+		// "noImplicitReturns": true, /* Report error when not all code paths in function return a value. */
+		// "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */
+		// "noUnusedParameters": true,  /* Report errors on unused parameters. */
+	}
+}
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/webpack.config.js
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/webpack.config.js
@@ -0,0 +1,48 @@
+//@ts-check
+
+'use strict';
+
+const path = require('path');
+
+//@ts-check
+/** @typedef {import('webpack').Configuration} WebpackConfig **/
+
+/** @type WebpackConfig */
+const extensionConfig = {
+  target: 'node', // VS Code extensions run in a Node.js-context 📖 -> https://webpack.js.org/configuration/node/
+	mode: 'none', // this leaves the source code as close as possible to the original (when packaging we set this to 'production')
+
+  entry: './src/extension.ts', // the entry point of this extension, 📖 -> https://webpack.js.org/configuration/entry-context/
+  output: {
+    // the bundle is stored in the 'dist' folder (check package.json), 📖 -> https://webpack.js.org/configuration/output/
+    path: path.resolve(__dirname, 'dist'),
+    filename: 'extension.js',
+    libraryTarget: 'commonjs2'
+  },
+  externals: {
+    vscode: 'commonjs vscode' // the vscode-module is created on-the-fly and must be excluded. Add other modules that cannot be webpack'ed, 📖 -> https://webpack.js.org/configuration/externals/
+    // modules added here also need to be added in the .vscodeignore file
+  },
+  resolve: {
+    // support reading TypeScript and JavaScript files, 📖 -> https://github.com/TypeStrong/ts-loader
+    extensions: ['.ts', '.js']
+  },
+  module: {
+    rules: [
+      {
+        test: /\.ts$/,
+        exclude: /node_modules/,
+        use: [
+          {
+            loader: 'ts-loader'
+          }
+        ]
+      }
+    ]
+  },
+  devtool: 'nosources-source-map',
+  infrastructureLogging: {
+    level: "log", // enables logging required for problem matchers
+  },
+};
+module.exports = [ extensionConfig ];
\ No newline at end of file
Index: sagemaker-code-editor/vscode/extensions/post-startup-notifications/yarn.lock
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/extensions/post-startup-notifications/yarn.lock
@@ -0,0 +1,2 @@
+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
+# yarn lockfile v1
Index: sagemaker-code-editor/vscode/build/npm/dirs.js
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/build/npm/dirs.js
@@ -0,0 +1,70 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+const fs = require('fs');
+
+// Complete list of directories where yarn should be executed to install node modules
+const dirs = [
+	'',
+	'build',
+	'extensions',
+	'extensions/configuration-editing',
+	'extensions/css-language-features',
+	'extensions/css-language-features/server',
+	'extensions/debug-auto-launch',
+	'extensions/debug-server-ready',
+	'extensions/emmet',
+	'extensions/extension-editing',
+	'extensions/git',
+	'extensions/git-base',
+	'extensions/github',
+	'extensions/github-authentication',
+	'extensions/grunt',
+	'extensions/gulp',
+	'extensions/html-language-features',
+	'extensions/html-language-features/server',
+	'extensions/ipynb',
+	'extensions/jake',
+	'extensions/json-language-features',
+	'extensions/json-language-features/server',
+	'extensions/markdown-language-features/server',
+	'extensions/markdown-language-features',
+	'extensions/markdown-math',
+	'extensions/media-preview',
+	'extensions/merge-conflict',
+	'extensions/microsoft-authentication',
+	'extensions/notebook-renderers',
+	'extensions/npm',
+	'extensions/php-language-features',
+	'extensions/references-view',
+	'extensions/sagemaker-extension',
+	'extensions/sagemaker-idle-extension',
+	'extensions/sagemaker-terminal-crash-mitigation',
+	'extensions/sagemaker-open-notebook-extension',
+	'extensions/sagemaker-ui-dark-theme',
+	'extensions/post-startup-notifications',
+	'extensions/search-result',
+	'extensions/simple-browser',
+	'extensions/tunnel-forwarding',
+	'extensions/typescript-language-features',
+	'extensions/vscode-api-tests',
+	'extensions/vscode-colorize-tests',
+	'extensions/vscode-test-resolver',
+	'remote',
+	'remote/web',
+	'test/automation',
+	'test/integration/browser',
+	'test/monaco',
+	'test/smoke',
+	'.vscode/extensions/vscode-selfhost-test-provider',
+];
+
+if (fs.existsSync(`${__dirname}/../../.build/distro/npm`)) {
+	dirs.push('.build/distro/npm');
+	dirs.push('.build/distro/npm/remote');
+	dirs.push('.build/distro/npm/remote/web');
+}
+
+exports.dirs = dirs;
Index: sagemaker-code-editor/vscode/build/gulpfile.extensions.js
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/build/gulpfile.extensions.js
@@ -0,0 +1,285 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// Increase max listeners for event emitters
+require('events').EventEmitter.defaultMaxListeners = 100;
+
+const gulp = require('gulp');
+const path = require('path');
+const nodeUtil = require('util');
+const es = require('event-stream');
+const filter = require('gulp-filter');
+const util = require('./lib/util');
+const { getVersion } = require('./lib/getVersion');
+const task = require('./lib/task');
+const watcher = require('./lib/watch');
+const createReporter = require('./lib/reporter').createReporter;
+const glob = require('glob');
+const root = path.dirname(__dirname);
+const commit = getVersion(root);
+const plumber = require('gulp-plumber');
+const ext = require('./lib/extensions');
+
+// To save 250ms for each gulp startup, we are caching the result here
+// const compilations = glob.sync('**/tsconfig.json', {
+// 	cwd: extensionsPath,
+// 	ignore: ['**/out/**', '**/node_modules/**']
+// });
+const compilations = [
+	'extensions/configuration-editing/tsconfig.json',
+	'extensions/css-language-features/client/tsconfig.json',
+	'extensions/css-language-features/server/tsconfig.json',
+	'extensions/debug-auto-launch/tsconfig.json',
+	'extensions/debug-server-ready/tsconfig.json',
+	'extensions/emmet/tsconfig.json',
+	'extensions/extension-editing/tsconfig.json',
+	'extensions/git/tsconfig.json',
+	'extensions/git-base/tsconfig.json',
+	'extensions/github/tsconfig.json',
+	'extensions/github-authentication/tsconfig.json',
+	'extensions/grunt/tsconfig.json',
+	'extensions/gulp/tsconfig.json',
+	'extensions/html-language-features/client/tsconfig.json',
+	'extensions/html-language-features/server/tsconfig.json',
+	'extensions/ipynb/tsconfig.json',
+	'extensions/jake/tsconfig.json',
+	'extensions/json-language-features/client/tsconfig.json',
+	'extensions/json-language-features/server/tsconfig.json',
+	'extensions/markdown-language-features/preview-src/tsconfig.json',
+	'extensions/markdown-language-features/server/tsconfig.json',
+	'extensions/markdown-language-features/tsconfig.json',
+	'extensions/markdown-math/tsconfig.json',
+	'extensions/media-preview/tsconfig.json',
+	'extensions/merge-conflict/tsconfig.json',
+	'extensions/microsoft-authentication/tsconfig.json',
+	'extensions/notebook-renderers/tsconfig.json',
+	'extensions/npm/tsconfig.json',
+	'extensions/php-language-features/tsconfig.json',
+	'extensions/references-view/tsconfig.json',
+	'extensions/search-result/tsconfig.json',
+	'extensions/simple-browser/tsconfig.json',
+	'extensions/sagemaker-extension/tsconfig.json',
+	'extensions/sagemaker-idle-extension/tsconfig.json',
+	'extensions/sagemaker-terminal-crash-mitigation/tsconfig.json',
+	'extensions/sagemaker-open-notebook-extension/tsconfig.json',
+	'extensions/sagemaker-ui-dark-theme/tsconfig.json',
+	'extensions/post-startup-notifications/tsconfig.json',
+	'extensions/tunnel-forwarding/tsconfig.json',
+	'extensions/typescript-language-features/test-workspace/tsconfig.json',
+	'extensions/typescript-language-features/web/tsconfig.json',
+	'extensions/typescript-language-features/tsconfig.json',
+	'extensions/vscode-api-tests/tsconfig.json',
+	'extensions/vscode-colorize-tests/tsconfig.json',
+	'extensions/vscode-test-resolver/tsconfig.json',
+
+	'.vscode/extensions/vscode-selfhost-test-provider/tsconfig.json',
+];
+
+const getBaseUrl = out => `https://ticino.blob.core.windows.net/sourcemaps/${commit}/${out}`;
+
+const tasks = compilations.map(function (tsconfigFile) {
+	const absolutePath = path.join(root, tsconfigFile);
+	const relativeDirname = path.dirname(tsconfigFile.replace(/^(.*\/)?extensions\//i, ''));
+
+	const overrideOptions = {};
+	overrideOptions.sourceMap = true;
+
+	const name = relativeDirname.replace(/\//g, '-');
+
+	const srcRoot = path.dirname(tsconfigFile);
+	const srcBase = path.join(srcRoot, 'src');
+	const src = path.join(srcBase, '**');
+	const srcOpts = { cwd: root, base: srcBase, dot: true };
+
+	const out = path.join(srcRoot, 'out');
+	const baseUrl = getBaseUrl(out);
+
+	let headerId, headerOut;
+	const index = relativeDirname.indexOf('/');
+	if (index < 0) {
+		headerId = 'vscode.' + relativeDirname;
+		headerOut = 'out';
+	} else {
+		headerId = 'vscode.' + relativeDirname.substr(0, index);
+		headerOut = relativeDirname.substr(index + 1) + '/out';
+	}
+
+	function createPipeline(build, emitError, transpileOnly) {
+		const nlsDev = require('vscode-nls-dev');
+		const tsb = require('./lib/tsb');
+		const sourcemaps = require('gulp-sourcemaps');
+
+		const reporter = createReporter('extensions');
+
+		overrideOptions.inlineSources = Boolean(build);
+		overrideOptions.base = path.dirname(absolutePath);
+
+		const compilation = tsb.create(absolutePath, overrideOptions, { verbose: false, transpileOnly, transpileOnlyIncludesDts: transpileOnly, transpileWithSwc: true }, err => reporter(err.toString()));
+
+		const pipeline = function () {
+			const input = es.through();
+			const tsFilter = filter(['**/*.ts', '!**/lib/lib*.d.ts', '!**/node_modules/**'], { restore: true, dot: true });
+			const output = input
+				.pipe(plumber({
+					errorHandler: function (err) {
+						if (err && !err.__reporter__) {
+							reporter(err);
+						}
+					}
+				}))
+				.pipe(tsFilter)
+				.pipe(util.loadSourcemaps())
+				.pipe(compilation())
+				.pipe(build ? nlsDev.rewriteLocalizeCalls() : es.through())
+				.pipe(build ? util.stripSourceMappingURL() : es.through())
+				.pipe(sourcemaps.write('.', {
+					sourceMappingURL: !build ? null : f => `${baseUrl}/${f.relative}.map`,
+					addComment: !!build,
+					includeContent: !!build,
+					// note: trailing slash is important, else the source URLs in V8's file coverage are incorrect
+					sourceRoot: '../src/',
+				}))
+				.pipe(tsFilter.restore)
+				.pipe(build ? nlsDev.bundleMetaDataFiles(headerId, headerOut) : es.through())
+				// Filter out *.nls.json file. We needed them only to bundle meta data file.
+				.pipe(filter(['**', '!**/*.nls.json'], { dot: true }))
+				.pipe(reporter.end(emitError));
+
+			return es.duplex(input, output);
+		};
+
+		// add src-stream for project files
+		pipeline.tsProjectSrc = () => {
+			return compilation.src(srcOpts);
+		};
+		return pipeline;
+	}
+
+	const cleanTask = task.define(`clean-extension-${name}`, util.rimraf(out));
+
+	const transpileTask = task.define(`transpile-extension:${name}`, task.series(cleanTask, () => {
+		const pipeline = createPipeline(false, true, true);
+		const nonts = gulp.src(src, srcOpts).pipe(filter(['**', '!**/*.ts']));
+		const input = es.merge(nonts, pipeline.tsProjectSrc());
+
+		return input
+			.pipe(pipeline())
+			.pipe(gulp.dest(out));
+	}));
+
+	const compileTask = task.define(`compile-extension:${name}`, task.series(cleanTask, () => {
+		const pipeline = createPipeline(false, true);
+		const nonts = gulp.src(src, srcOpts).pipe(filter(['**', '!**/*.ts']));
+		const input = es.merge(nonts, pipeline.tsProjectSrc());
+
+		return input
+			.pipe(pipeline())
+			.pipe(gulp.dest(out));
+	}));
+
+	const watchTask = task.define(`watch-extension:${name}`, task.series(cleanTask, () => {
+		const pipeline = createPipeline(false);
+		const nonts = gulp.src(src, srcOpts).pipe(filter(['**', '!**/*.ts']));
+		const input = es.merge(nonts, pipeline.tsProjectSrc());
+		const watchInput = watcher(src, { ...srcOpts, ...{ readDelay: 200 } });
+
+		return watchInput
+			.pipe(util.incremental(pipeline, input))
+			.pipe(gulp.dest(out));
+	}));
+
+	const compileBuildTask = task.define(`compile-build-extension-${name}`, task.series(cleanTask, () => {
+		const pipeline = createPipeline(true, true);
+		const nonts = gulp.src(src, srcOpts).pipe(filter(['**', '!**/*.ts']));
+		const input = es.merge(nonts, pipeline.tsProjectSrc());
+
+		return input
+			.pipe(pipeline())
+			.pipe(gulp.dest(out));
+	}));
+
+	// Tasks
+	gulp.task(transpileTask);
+	gulp.task(compileTask);
+	gulp.task(watchTask);
+
+	return { transpileTask, compileTask, watchTask, compileBuildTask };
+});
+
+const transpileExtensionsTask = task.define('transpile-extensions', task.parallel(...tasks.map(t => t.transpileTask)));
+gulp.task(transpileExtensionsTask);
+
+const compileExtensionsTask = task.define('compile-extensions', task.parallel(...tasks.map(t => t.compileTask)));
+gulp.task(compileExtensionsTask);
+exports.compileExtensionsTask = compileExtensionsTask;
+
+const watchExtensionsTask = task.define('watch-extensions', task.parallel(...tasks.map(t => t.watchTask)));
+gulp.task(watchExtensionsTask);
+exports.watchExtensionsTask = watchExtensionsTask;
+
+const compileExtensionsBuildLegacyTask = task.define('compile-extensions-build-legacy', task.parallel(...tasks.map(t => t.compileBuildTask)));
+gulp.task(compileExtensionsBuildLegacyTask);
+
+//#region Extension media
+
+const compileExtensionMediaTask = task.define('compile-extension-media', () => ext.buildExtensionMedia(false));
+gulp.task(compileExtensionMediaTask);
+exports.compileExtensionMediaTask = compileExtensionMediaTask;
+
+const watchExtensionMedia = task.define('watch-extension-media', () => ext.buildExtensionMedia(true));
+gulp.task(watchExtensionMedia);
+exports.watchExtensionMedia = watchExtensionMedia;
+
+const compileExtensionMediaBuildTask = task.define('compile-extension-media-build', () => ext.buildExtensionMedia(false, '.build/extensions'));
+gulp.task(compileExtensionMediaBuildTask);
+exports.compileExtensionMediaBuildTask = compileExtensionMediaBuildTask;
+
+//#endregion
+
+//#region Azure Pipelines
+
+const cleanExtensionsBuildTask = task.define('clean-extensions-build', util.rimraf('.build/extensions'));
+const compileExtensionsBuildTask = task.define('compile-extensions-build', task.series(
+	cleanExtensionsBuildTask,
+	task.define('bundle-marketplace-extensions-build', () => ext.packageMarketplaceExtensionsStream(false).pipe(gulp.dest('.build'))),
+	task.define('bundle-extensions-build', () => ext.packageLocalExtensionsStream(false, false).pipe(gulp.dest('.build'))),
+));
+
+gulp.task(compileExtensionsBuildTask);
+gulp.task(task.define('extensions-ci', task.series(compileExtensionsBuildTask, compileExtensionMediaBuildTask)));
+
+const compileExtensionsBuildPullRequestTask = task.define('compile-extensions-build-pr', task.series(
+	cleanExtensionsBuildTask,
+	task.define('bundle-marketplace-extensions-build', () => ext.packageMarketplaceExtensionsStream(false).pipe(gulp.dest('.build'))),
+	task.define('bundle-extensions-build-pr', () => ext.packageLocalExtensionsStream(false, true).pipe(gulp.dest('.build'))),
+));
+
+gulp.task(compileExtensionsBuildPullRequestTask);
+gulp.task(task.define('extensions-ci-pr', task.series(compileExtensionsBuildPullRequestTask, compileExtensionMediaBuildTask)));
+
+
+exports.compileExtensionsBuildTask = compileExtensionsBuildTask;
+
+//#endregion
+
+const compileWebExtensionsTask = task.define('compile-web', () => buildWebExtensions(false));
+gulp.task(compileWebExtensionsTask);
+exports.compileWebExtensionsTask = compileWebExtensionsTask;
+
+const watchWebExtensionsTask = task.define('watch-web', () => buildWebExtensions(true));
+gulp.task(watchWebExtensionsTask);
+exports.watchWebExtensionsTask = watchWebExtensionsTask;
+
+/**
+ * @param {boolean} isWatch
+ */
+async function buildWebExtensions(isWatch) {
+	const extensionsPath = path.join(root, 'extensions');
+	const webpackConfigLocations = await nodeUtil.promisify(glob)(
+		path.join(extensionsPath, '**', 'extension-browser.webpack.config.js'),
+		{ ignore: ['**/node_modules'] }
+	);
+	return ext.webpackExtensions('packaging web extension', isWatch, webpackConfigLocations.map(configPath => ({ configPath })));
+}
